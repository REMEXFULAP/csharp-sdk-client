/* 
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrás un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Obtiene una lista de órdenes
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de órdenes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2023-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <param name="status">Estado para filtrar (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 RestV1OperationOrdersGet (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null, string status = null);

        /// <summary>
        /// Obtiene una lista de órdenes
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de órdenes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2023-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <param name="status">Estado para filtrar (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> RestV1OperationOrdersGetWithHttpInfo (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null, string status = null);
        /// <summary>
        /// Obtiene una lista de operaciones P2P
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de operaciones P2P
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2022-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 RestV1OperationP2pGet (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null);

        /// <summary>
        /// Obtiene una lista de operaciones P2P
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de operaciones P2P
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2022-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> RestV1OperationP2pGetWithHttpInfo (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Obtiene una lista de órdenes
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de órdenes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2023-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <param name="status">Estado para filtrar (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> RestV1OperationOrdersGetAsync (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null, string status = null);

        /// <summary>
        /// Obtiene una lista de órdenes
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de órdenes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2023-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <param name="status">Estado para filtrar (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> RestV1OperationOrdersGetAsyncWithHttpInfo (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null, string status = null);
        /// <summary>
        /// Obtiene una lista de operaciones P2P
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de operaciones P2P
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2022-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> RestV1OperationP2pGetAsync (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null);

        /// <summary>
        /// Obtiene una lista de operaciones P2P
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de operaciones P2P
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2022-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> RestV1OperationP2pGetAsyncWithHttpInfo (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OperationsApi : IOperationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OperationsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OperationsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Obtiene una lista de órdenes Recupera una lista paginada de órdenes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2023-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <param name="status">Estado para filtrar (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 RestV1OperationOrdersGet (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null, string status = null)
        {
             ApiResponse<InlineResponse2005> localVarResponse = RestV1OperationOrdersGetWithHttpInfo(pg, pgSize, start, end, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene una lista de órdenes Recupera una lista paginada de órdenes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2023-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <param name="status">Estado para filtrar (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > RestV1OperationOrdersGetWithHttpInfo (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null, string status = null)
        {

            var localVarPath = "/rest/v1/operation/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pg != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pg", pg)); // query parameter
            if (pgSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pgSize", pgSize)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1OperationOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Obtiene una lista de órdenes Recupera una lista paginada de órdenes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2023-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <param name="status">Estado para filtrar (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> RestV1OperationOrdersGetAsync (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null, string status = null)
        {
             ApiResponse<InlineResponse2005> localVarResponse = await RestV1OperationOrdersGetAsyncWithHttpInfo(pg, pgSize, start, end, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene una lista de órdenes Recupera una lista paginada de órdenes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2023-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <param name="status">Estado para filtrar (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> RestV1OperationOrdersGetAsyncWithHttpInfo (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null, string status = null)
        {

            var localVarPath = "/rest/v1/operation/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pg != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pg", pg)); // query parameter
            if (pgSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pgSize", pgSize)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1OperationOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Obtiene una lista de operaciones P2P Recupera una lista paginada de operaciones P2P
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2022-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 RestV1OperationP2pGet (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = RestV1OperationP2pGetWithHttpInfo(pg, pgSize, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene una lista de operaciones P2P Recupera una lista paginada de operaciones P2P
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2022-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > RestV1OperationP2pGetWithHttpInfo (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null)
        {

            var localVarPath = "/rest/v1/operation/p2p";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pg != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pg", pg)); // query parameter
            if (pgSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pgSize", pgSize)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1OperationP2pGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Obtiene una lista de operaciones P2P Recupera una lista paginada de operaciones P2P
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2022-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> RestV1OperationP2pGetAsync (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await RestV1OperationP2pGetAsyncWithHttpInfo(pg, pgSize, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene una lista de operaciones P2P Recupera una lista paginada de operaciones P2P
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pg">Número de página (optional, default to 1)</param>
        /// <param name="pgSize">Cantidad de elementos por página (optional, default to 25)</param>
        /// <param name="start">Fecha de inicio en formato Y-m-d H:i:s (optional, default to 2022-01-01)</param>
        /// <param name="end">Fecha de finalización en formato Y-m-d H:i:s (optional, default to 2025-01-01)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> RestV1OperationP2pGetAsyncWithHttpInfo (int? pg = null, int? pgSize = null, DateTime? start = null, DateTime? end = null)
        {

            var localVarPath = "/rest/v1/operation/p2p";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pg != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pg", pg)); // query parameter
            if (pgSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pgSize", pgSize)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1OperationP2pGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

    }
}
