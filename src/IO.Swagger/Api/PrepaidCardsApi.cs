/* 
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrás un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrepaidCardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bloquea o desbloquea una tarjeta
        /// </summary>
        /// <remarks>
        /// Cambia el estado de bloqueo de una tarjeta específica
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 RestV1CardNumberTogglePost (string number);

        /// <summary>
        /// Bloquea o desbloquea una tarjeta
        /// </summary>
        /// <remarks>
        /// Cambia el estado de bloqueo de una tarjeta específica
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> RestV1CardNumberTogglePostWithHttpInfo (string number);
        /// <summary>
        /// Obtiene las transacciones de una tarjeta
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de transacciones para una tarjeta específica
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <param name="pg">Número de página</param>
        /// <param name="pgSize">Tamaño de página</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 RestV1CardNumberTransactionsPgPgSizeGet (string number, int? pg, int? pgSize);

        /// <summary>
        /// Obtiene las transacciones de una tarjeta
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de transacciones para una tarjeta específica
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <param name="pg">Número de página</param>
        /// <param name="pgSize">Tamaño de página</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> RestV1CardNumberTransactionsPgPgSizeGetWithHttpInfo (string number, int? pg, int? pgSize);
        /// <summary>
        /// Transfiere saldo entre cuentas Remesita
        /// </summary>
        /// <remarks>
        /// Permite transferir saldo entre dos cuentas Remesita especificadas por los números de tarjeta Visa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Detalles de la transferencia</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 RestV1CardTransferBetweenPost (Body body);

        /// <summary>
        /// Transfiere saldo entre cuentas Remesita
        /// </summary>
        /// <remarks>
        /// Permite transferir saldo entre dos cuentas Remesita especificadas por los números de tarjeta Visa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Detalles de la transferencia</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> RestV1CardTransferBetweenPostWithHttpInfo (Body body);
        /// <summary>
        /// Obtiene la lista de tarjetas prepagadas
        /// </summary>
        /// <remarks>
        /// Devuelve una lista de todas las tarjetas prepagadas en el sistema
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 RestV1CardsGet ();

        /// <summary>
        /// Obtiene la lista de tarjetas prepagadas
        /// </summary>
        /// <remarks>
        /// Devuelve una lista de todas las tarjetas prepagadas en el sistema
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> RestV1CardsGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bloquea o desbloquea una tarjeta
        /// </summary>
        /// <remarks>
        /// Cambia el estado de bloqueo de una tarjeta específica
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> RestV1CardNumberTogglePostAsync (string number);

        /// <summary>
        /// Bloquea o desbloquea una tarjeta
        /// </summary>
        /// <remarks>
        /// Cambia el estado de bloqueo de una tarjeta específica
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> RestV1CardNumberTogglePostAsyncWithHttpInfo (string number);
        /// <summary>
        /// Obtiene las transacciones de una tarjeta
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de transacciones para una tarjeta específica
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <param name="pg">Número de página</param>
        /// <param name="pgSize">Tamaño de página</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> RestV1CardNumberTransactionsPgPgSizeGetAsync (string number, int? pg, int? pgSize);

        /// <summary>
        /// Obtiene las transacciones de una tarjeta
        /// </summary>
        /// <remarks>
        /// Recupera una lista paginada de transacciones para una tarjeta específica
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <param name="pg">Número de página</param>
        /// <param name="pgSize">Tamaño de página</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RestV1CardNumberTransactionsPgPgSizeGetAsyncWithHttpInfo (string number, int? pg, int? pgSize);
        /// <summary>
        /// Transfiere saldo entre cuentas Remesita
        /// </summary>
        /// <remarks>
        /// Permite transferir saldo entre dos cuentas Remesita especificadas por los números de tarjeta Visa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Detalles de la transferencia</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> RestV1CardTransferBetweenPostAsync (Body body);

        /// <summary>
        /// Transfiere saldo entre cuentas Remesita
        /// </summary>
        /// <remarks>
        /// Permite transferir saldo entre dos cuentas Remesita especificadas por los números de tarjeta Visa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Detalles de la transferencia</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> RestV1CardTransferBetweenPostAsyncWithHttpInfo (Body body);
        /// <summary>
        /// Obtiene la lista de tarjetas prepagadas
        /// </summary>
        /// <remarks>
        /// Devuelve una lista de todas las tarjetas prepagadas en el sistema
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> RestV1CardsGetAsync ();

        /// <summary>
        /// Obtiene la lista de tarjetas prepagadas
        /// </summary>
        /// <remarks>
        /// Devuelve una lista de todas las tarjetas prepagadas en el sistema
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> RestV1CardsGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrepaidCardsApi : IPrepaidCardsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrepaidCardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrepaidCardsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrepaidCardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrepaidCardsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bloquea o desbloquea una tarjeta Cambia el estado de bloqueo de una tarjeta específica
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 RestV1CardNumberTogglePost (string number)
        {
             ApiResponse<InlineResponse2002> localVarResponse = RestV1CardNumberTogglePostWithHttpInfo(number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bloquea o desbloquea una tarjeta Cambia el estado de bloqueo de una tarjeta específica
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > RestV1CardNumberTogglePostWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PrepaidCardsApi->RestV1CardNumberTogglePost");

            var localVarPath = "/rest/v1/card/{number}/toggle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1CardNumberTogglePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Bloquea o desbloquea una tarjeta Cambia el estado de bloqueo de una tarjeta específica
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> RestV1CardNumberTogglePostAsync (string number)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await RestV1CardNumberTogglePostAsyncWithHttpInfo(number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bloquea o desbloquea una tarjeta Cambia el estado de bloqueo de una tarjeta específica
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> RestV1CardNumberTogglePostAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PrepaidCardsApi->RestV1CardNumberTogglePost");

            var localVarPath = "/rest/v1/card/{number}/toggle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1CardNumberTogglePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Obtiene las transacciones de una tarjeta Recupera una lista paginada de transacciones para una tarjeta específica
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <param name="pg">Número de página</param>
        /// <param name="pgSize">Tamaño de página</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 RestV1CardNumberTransactionsPgPgSizeGet (string number, int? pg, int? pgSize)
        {
             ApiResponse<InlineResponse2003> localVarResponse = RestV1CardNumberTransactionsPgPgSizeGetWithHttpInfo(number, pg, pgSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene las transacciones de una tarjeta Recupera una lista paginada de transacciones para una tarjeta específica
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <param name="pg">Número de página</param>
        /// <param name="pgSize">Tamaño de página</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > RestV1CardNumberTransactionsPgPgSizeGetWithHttpInfo (string number, int? pg, int? pgSize)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PrepaidCardsApi->RestV1CardNumberTransactionsPgPgSizeGet");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling PrepaidCardsApi->RestV1CardNumberTransactionsPgPgSizeGet");
            // verify the required parameter 'pgSize' is set
            if (pgSize == null)
                throw new ApiException(400, "Missing required parameter 'pgSize' when calling PrepaidCardsApi->RestV1CardNumberTransactionsPgPgSizeGet");

            var localVarPath = "/rest/v1/card/{number}/transactions/{pg}/{pgSize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (pg != null) localVarPathParams.Add("pg", this.Configuration.ApiClient.ParameterToString(pg)); // path parameter
            if (pgSize != null) localVarPathParams.Add("pgSize", this.Configuration.ApiClient.ParameterToString(pgSize)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1CardNumberTransactionsPgPgSizeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Obtiene las transacciones de una tarjeta Recupera una lista paginada de transacciones para una tarjeta específica
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <param name="pg">Número de página</param>
        /// <param name="pgSize">Tamaño de página</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> RestV1CardNumberTransactionsPgPgSizeGetAsync (string number, int? pg, int? pgSize)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await RestV1CardNumberTransactionsPgPgSizeGetAsyncWithHttpInfo(number, pg, pgSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene las transacciones de una tarjeta Recupera una lista paginada de transacciones para una tarjeta específica
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Número de tarjeta</param>
        /// <param name="pg">Número de página</param>
        /// <param name="pgSize">Tamaño de página</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RestV1CardNumberTransactionsPgPgSizeGetAsyncWithHttpInfo (string number, int? pg, int? pgSize)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling PrepaidCardsApi->RestV1CardNumberTransactionsPgPgSizeGet");
            // verify the required parameter 'pg' is set
            if (pg == null)
                throw new ApiException(400, "Missing required parameter 'pg' when calling PrepaidCardsApi->RestV1CardNumberTransactionsPgPgSizeGet");
            // verify the required parameter 'pgSize' is set
            if (pgSize == null)
                throw new ApiException(400, "Missing required parameter 'pgSize' when calling PrepaidCardsApi->RestV1CardNumberTransactionsPgPgSizeGet");

            var localVarPath = "/rest/v1/card/{number}/transactions/{pg}/{pgSize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (pg != null) localVarPathParams.Add("pg", this.Configuration.ApiClient.ParameterToString(pg)); // path parameter
            if (pgSize != null) localVarPathParams.Add("pgSize", this.Configuration.ApiClient.ParameterToString(pgSize)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1CardNumberTransactionsPgPgSizeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Transfiere saldo entre cuentas Remesita Permite transferir saldo entre dos cuentas Remesita especificadas por los números de tarjeta Visa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Detalles de la transferencia</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 RestV1CardTransferBetweenPost (Body body)
        {
             ApiResponse<InlineResponse2001> localVarResponse = RestV1CardTransferBetweenPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfiere saldo entre cuentas Remesita Permite transferir saldo entre dos cuentas Remesita especificadas por los números de tarjeta Visa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Detalles de la transferencia</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > RestV1CardTransferBetweenPostWithHttpInfo (Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PrepaidCardsApi->RestV1CardTransferBetweenPost");

            var localVarPath = "/rest/v1/card/transfer-between";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1CardTransferBetweenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Transfiere saldo entre cuentas Remesita Permite transferir saldo entre dos cuentas Remesita especificadas por los números de tarjeta Visa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Detalles de la transferencia</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> RestV1CardTransferBetweenPostAsync (Body body)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await RestV1CardTransferBetweenPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfiere saldo entre cuentas Remesita Permite transferir saldo entre dos cuentas Remesita especificadas por los números de tarjeta Visa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Detalles de la transferencia</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> RestV1CardTransferBetweenPostAsyncWithHttpInfo (Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PrepaidCardsApi->RestV1CardTransferBetweenPost");

            var localVarPath = "/rest/v1/card/transfer-between";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1CardTransferBetweenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Obtiene la lista de tarjetas prepagadas Devuelve una lista de todas las tarjetas prepagadas en el sistema
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 RestV1CardsGet ()
        {
             ApiResponse<InlineResponse2004> localVarResponse = RestV1CardsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene la lista de tarjetas prepagadas Devuelve una lista de todas las tarjetas prepagadas en el sistema
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > RestV1CardsGetWithHttpInfo ()
        {

            var localVarPath = "/rest/v1/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1CardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Obtiene la lista de tarjetas prepagadas Devuelve una lista de todas las tarjetas prepagadas en el sistema
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> RestV1CardsGetAsync ()
        {
             ApiResponse<InlineResponse2004> localVarResponse = await RestV1CardsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene la lista de tarjetas prepagadas Devuelve una lista de todas las tarjetas prepagadas en el sistema
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> RestV1CardsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/rest/v1/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestV1CardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

    }
}
