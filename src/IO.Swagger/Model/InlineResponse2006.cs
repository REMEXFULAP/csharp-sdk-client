/* 
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendr√°s un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2006
    /// </summary>
    [DataContract]
    public partial class InlineResponse2006 :  IEquatable<InlineResponse2006>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006" /> class.
        /// </summary>
        /// <param name="pg">pg.</param>
        /// <param name="pgSize">pgSize.</param>
        /// <param name="pages">pages.</param>
        /// <param name="total">total.</param>
        /// <param name="allowNext">allowNext.</param>
        /// <param name="items">items.</param>
        public InlineResponse2006(int? pg = default(int?), int? pgSize = default(int?), int? pages = default(int?), int? total = default(int?), bool? allowNext = default(bool?), List<InlineResponse2006Items> items = default(List<InlineResponse2006Items>))
        {
            this.Pg = pg;
            this.PgSize = pgSize;
            this.Pages = pages;
            this.Total = total;
            this.AllowNext = allowNext;
            this.Items = items;
        }
        
        /// <summary>
        /// Gets or Sets Pg
        /// </summary>
        [DataMember(Name="pg", EmitDefaultValue=false)]
        public int? Pg { get; set; }

        /// <summary>
        /// Gets or Sets PgSize
        /// </summary>
        [DataMember(Name="pgSize", EmitDefaultValue=false)]
        public int? PgSize { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public int? Pages { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Gets or Sets AllowNext
        /// </summary>
        [DataMember(Name="allowNext", EmitDefaultValue=false)]
        public bool? AllowNext { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<InlineResponse2006Items> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006 {\n");
            sb.Append("  Pg: ").Append(Pg).Append("\n");
            sb.Append("  PgSize: ").Append(PgSize).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  AllowNext: ").Append(AllowNext).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006);
        }

        /// <summary>
        /// Returns true if InlineResponse2006 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pg == input.Pg ||
                    (this.Pg != null &&
                    this.Pg.Equals(input.Pg))
                ) && 
                (
                    this.PgSize == input.PgSize ||
                    (this.PgSize != null &&
                    this.PgSize.Equals(input.PgSize))
                ) && 
                (
                    this.Pages == input.Pages ||
                    (this.Pages != null &&
                    this.Pages.Equals(input.Pages))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.AllowNext == input.AllowNext ||
                    (this.AllowNext != null &&
                    this.AllowNext.Equals(input.AllowNext))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pg != null)
                    hashCode = hashCode * 59 + this.Pg.GetHashCode();
                if (this.PgSize != null)
                    hashCode = hashCode * 59 + this.PgSize.GetHashCode();
                if (this.Pages != null)
                    hashCode = hashCode * 59 + this.Pages.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.AllowNext != null)
                    hashCode = hashCode * 59 + this.AllowNext.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
