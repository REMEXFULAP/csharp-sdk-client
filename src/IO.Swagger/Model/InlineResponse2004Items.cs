/* 
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrás un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2004Items
    /// </summary>
    [DataContract]
    public partial class InlineResponse2004Items :  IEquatable<InlineResponse2004Items>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Items" /> class.
        /// </summary>
        /// <param name="balance">Balance de la tarjeta.</param>
        /// <param name="balanceFormatted">Balance de la tarjeta formateado.</param>
        /// <param name="balanceUSD">Balance en USD.</param>
        /// <param name="balanceUSDFormatted">Balance en USD formateado.</param>
        /// <param name="status">Estado de la tarjeta.</param>
        /// <param name="number">Número de la tarjeta.</param>
        /// <param name="numberFormatted">Número de la tarjeta formateado.</param>
        /// <param name="exchangeRate">Tasa de cambio.</param>
        /// <param name="clabe">CLABE de la tarjeta.</param>
        /// <param name="cashReference">Referencia de efectivo.</param>
        /// <param name="locked">Indica si la tarjeta está bloqueada.</param>
        /// <param name="alias">Alias de la tarjeta.</param>
        /// <param name="main">Indica si es la tarjeta principal.</param>
        public InlineResponse2004Items(decimal? balance = default(decimal?), string balanceFormatted = default(string), decimal? balanceUSD = default(decimal?), string balanceUSDFormatted = default(string), string status = default(string), string number = default(string), string numberFormatted = default(string), decimal? exchangeRate = default(decimal?), string clabe = default(string), string cashReference = default(string), bool? locked = default(bool?), string alias = default(string), bool? main = default(bool?))
        {
            this.Balance = balance;
            this.BalanceFormatted = balanceFormatted;
            this.BalanceUSD = balanceUSD;
            this.BalanceUSDFormatted = balanceUSDFormatted;
            this.Status = status;
            this.Number = number;
            this.NumberFormatted = numberFormatted;
            this.ExchangeRate = exchangeRate;
            this.Clabe = clabe;
            this.CashReference = cashReference;
            this.Locked = locked;
            this.Alias = alias;
            this.Main = main;
        }
        
        /// <summary>
        /// Balance de la tarjeta
        /// </summary>
        /// <value>Balance de la tarjeta</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public decimal? Balance { get; set; }

        /// <summary>
        /// Balance de la tarjeta formateado
        /// </summary>
        /// <value>Balance de la tarjeta formateado</value>
        [DataMember(Name="balanceFormatted", EmitDefaultValue=false)]
        public string BalanceFormatted { get; set; }

        /// <summary>
        /// Balance en USD
        /// </summary>
        /// <value>Balance en USD</value>
        [DataMember(Name="balanceUSD", EmitDefaultValue=false)]
        public decimal? BalanceUSD { get; set; }

        /// <summary>
        /// Balance en USD formateado
        /// </summary>
        /// <value>Balance en USD formateado</value>
        [DataMember(Name="balanceUSDFormatted", EmitDefaultValue=false)]
        public string BalanceUSDFormatted { get; set; }

        /// <summary>
        /// Estado de la tarjeta
        /// </summary>
        /// <value>Estado de la tarjeta</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Número de la tarjeta
        /// </summary>
        /// <value>Número de la tarjeta</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Número de la tarjeta formateado
        /// </summary>
        /// <value>Número de la tarjeta formateado</value>
        [DataMember(Name="numberFormatted", EmitDefaultValue=false)]
        public string NumberFormatted { get; set; }

        /// <summary>
        /// Tasa de cambio
        /// </summary>
        /// <value>Tasa de cambio</value>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// CLABE de la tarjeta
        /// </summary>
        /// <value>CLABE de la tarjeta</value>
        [DataMember(Name="clabe", EmitDefaultValue=false)]
        public string Clabe { get; set; }

        /// <summary>
        /// Referencia de efectivo
        /// </summary>
        /// <value>Referencia de efectivo</value>
        [DataMember(Name="cashReference", EmitDefaultValue=false)]
        public string CashReference { get; set; }

        /// <summary>
        /// Indica si la tarjeta está bloqueada
        /// </summary>
        /// <value>Indica si la tarjeta está bloqueada</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public bool? Locked { get; set; }

        /// <summary>
        /// Alias de la tarjeta
        /// </summary>
        /// <value>Alias de la tarjeta</value>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// Indica si es la tarjeta principal
        /// </summary>
        /// <value>Indica si es la tarjeta principal</value>
        [DataMember(Name="main", EmitDefaultValue=false)]
        public bool? Main { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004Items {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  BalanceFormatted: ").Append(BalanceFormatted).Append("\n");
            sb.Append("  BalanceUSD: ").Append(BalanceUSD).Append("\n");
            sb.Append("  BalanceUSDFormatted: ").Append(BalanceUSDFormatted).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  NumberFormatted: ").Append(NumberFormatted).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  Clabe: ").Append(Clabe).Append("\n");
            sb.Append("  CashReference: ").Append(CashReference).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Main: ").Append(Main).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004Items);
        }

        /// <summary>
        /// Returns true if InlineResponse2004Items instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004Items to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004Items input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.BalanceFormatted == input.BalanceFormatted ||
                    (this.BalanceFormatted != null &&
                    this.BalanceFormatted.Equals(input.BalanceFormatted))
                ) && 
                (
                    this.BalanceUSD == input.BalanceUSD ||
                    (this.BalanceUSD != null &&
                    this.BalanceUSD.Equals(input.BalanceUSD))
                ) && 
                (
                    this.BalanceUSDFormatted == input.BalanceUSDFormatted ||
                    (this.BalanceUSDFormatted != null &&
                    this.BalanceUSDFormatted.Equals(input.BalanceUSDFormatted))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.NumberFormatted == input.NumberFormatted ||
                    (this.NumberFormatted != null &&
                    this.NumberFormatted.Equals(input.NumberFormatted))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.Clabe == input.Clabe ||
                    (this.Clabe != null &&
                    this.Clabe.Equals(input.Clabe))
                ) && 
                (
                    this.CashReference == input.CashReference ||
                    (this.CashReference != null &&
                    this.CashReference.Equals(input.CashReference))
                ) && 
                (
                    this.Locked == input.Locked ||
                    (this.Locked != null &&
                    this.Locked.Equals(input.Locked))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.Main == input.Main ||
                    (this.Main != null &&
                    this.Main.Equals(input.Main))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.BalanceFormatted != null)
                    hashCode = hashCode * 59 + this.BalanceFormatted.GetHashCode();
                if (this.BalanceUSD != null)
                    hashCode = hashCode * 59 + this.BalanceUSD.GetHashCode();
                if (this.BalanceUSDFormatted != null)
                    hashCode = hashCode * 59 + this.BalanceUSDFormatted.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.NumberFormatted != null)
                    hashCode = hashCode * 59 + this.NumberFormatted.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.Clabe != null)
                    hashCode = hashCode * 59 + this.Clabe.GetHashCode();
                if (this.CashReference != null)
                    hashCode = hashCode * 59 + this.CashReference.GetHashCode();
                if (this.Locked != null)
                    hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                if (this.Main != null)
                    hashCode = hashCode * 59 + this.Main.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
