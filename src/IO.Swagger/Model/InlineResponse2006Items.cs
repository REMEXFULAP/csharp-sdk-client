/* 
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendr√°s un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2006Items
    /// </summary>
    [DataContract]
    public partial class InlineResponse2006Items :  IEquatable<InlineResponse2006Items>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006Items" /> class.
        /// </summary>
        /// <param name="match">match.</param>
        /// <param name="status">status.</param>
        /// <param name="order">order.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="completedAt">completedAt.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="sku">sku.</param>
        /// <param name="quotation">quotation.</param>
        /// <param name="quotationCurrency">quotationCurrency.</param>
        /// <param name="recipientAccount">recipientAccount.</param>
        /// <param name="recipientAmount">recipientAmount.</param>
        public InlineResponse2006Items(bool? match = default(bool?), string status = default(string), string order = default(string), DateTime? createdAt = default(DateTime?), DateTime? completedAt = default(DateTime?), string paymentMethod = default(string), string sku = default(string), decimal? quotation = default(decimal?), string quotationCurrency = default(string), string recipientAccount = default(string), decimal? recipientAmount = default(decimal?))
        {
            this.Match = match;
            this.Status = status;
            this.Order = order;
            this.CreatedAt = createdAt;
            this.CompletedAt = completedAt;
            this.PaymentMethod = paymentMethod;
            this.Sku = sku;
            this.Quotation = quotation;
            this.QuotationCurrency = quotationCurrency;
            this.RecipientAccount = recipientAccount;
            this.RecipientAmount = recipientAmount;
        }
        
        /// <summary>
        /// Gets or Sets Match
        /// </summary>
        [DataMember(Name="match", EmitDefaultValue=false)]
        public bool? Match { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name="completedAt", EmitDefaultValue=false)]
        public DateTime? CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets Quotation
        /// </summary>
        [DataMember(Name="quotation", EmitDefaultValue=false)]
        public decimal? Quotation { get; set; }

        /// <summary>
        /// Gets or Sets QuotationCurrency
        /// </summary>
        [DataMember(Name="quotationCurrency", EmitDefaultValue=false)]
        public string QuotationCurrency { get; set; }

        /// <summary>
        /// Gets or Sets RecipientAccount
        /// </summary>
        [DataMember(Name="recipientAccount", EmitDefaultValue=false)]
        public string RecipientAccount { get; set; }

        /// <summary>
        /// Gets or Sets RecipientAmount
        /// </summary>
        [DataMember(Name="recipientAmount", EmitDefaultValue=false)]
        public decimal? RecipientAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006Items {\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Quotation: ").Append(Quotation).Append("\n");
            sb.Append("  QuotationCurrency: ").Append(QuotationCurrency).Append("\n");
            sb.Append("  RecipientAccount: ").Append(RecipientAccount).Append("\n");
            sb.Append("  RecipientAmount: ").Append(RecipientAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006Items);
        }

        /// <summary>
        /// Returns true if InlineResponse2006Items instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006Items to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006Items input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Match == input.Match ||
                    (this.Match != null &&
                    this.Match.Equals(input.Match))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Quotation == input.Quotation ||
                    (this.Quotation != null &&
                    this.Quotation.Equals(input.Quotation))
                ) && 
                (
                    this.QuotationCurrency == input.QuotationCurrency ||
                    (this.QuotationCurrency != null &&
                    this.QuotationCurrency.Equals(input.QuotationCurrency))
                ) && 
                (
                    this.RecipientAccount == input.RecipientAccount ||
                    (this.RecipientAccount != null &&
                    this.RecipientAccount.Equals(input.RecipientAccount))
                ) && 
                (
                    this.RecipientAmount == input.RecipientAmount ||
                    (this.RecipientAmount != null &&
                    this.RecipientAmount.Equals(input.RecipientAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Match != null)
                    hashCode = hashCode * 59 + this.Match.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Quotation != null)
                    hashCode = hashCode * 59 + this.Quotation.GetHashCode();
                if (this.QuotationCurrency != null)
                    hashCode = hashCode * 59 + this.QuotationCurrency.GetHashCode();
                if (this.RecipientAccount != null)
                    hashCode = hashCode * 59 + this.RecipientAccount.GetHashCode();
                if (this.RecipientAmount != null)
                    hashCode = hashCode * 59 + this.RecipientAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
