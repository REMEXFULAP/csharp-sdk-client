/* 
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrás un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body1
    /// </summary>
    [DataContract]
    public partial class Body1 :  IEquatable<Body1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Body1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body1" /> class.
        /// </summary>
        /// <param name="businessUnitId">ID del negocio que está generando el link de pago (required).</param>
        /// <param name="amount">Monto a pagar (required).</param>
        /// <param name="concept">Concepto de pago o comentario (required).</param>
        /// <param name="ipnUrl">Dirección para recibir webhooks de notificaciones de pago en segundo plano.</param>
        /// <param name="successUrl">URL a donde redireccionar si el pago es satisfactorio.</param>
        /// <param name="cancelUrl">URL a donde redireccionar si el pago es cancelado.</param>
        /// <param name="customId">Identificador externo para trazabilidad.</param>
        /// <param name="payerName">Nombre del pagador (si se conoce).</param>
        /// <param name="payerPhone">Teléfono del pagador (si se conoce).</param>
        /// <param name="payerEmail">Email del pagador (si se conoce).</param>
        public Body1(string businessUnitId = default(string), decimal? amount = default(decimal?), string concept = default(string), string ipnUrl = default(string), string successUrl = default(string), string cancelUrl = default(string), string customId = default(string), string payerName = default(string), string payerPhone = default(string), string payerEmail = default(string))
        {
            // to ensure "businessUnitId" is required (not null)
            if (businessUnitId == null)
            {
                throw new InvalidDataException("businessUnitId is a required property for Body1 and cannot be null");
            }
            else
            {
                this.BusinessUnitId = businessUnitId;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for Body1 and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "concept" is required (not null)
            if (concept == null)
            {
                throw new InvalidDataException("concept is a required property for Body1 and cannot be null");
            }
            else
            {
                this.Concept = concept;
            }
            this.IpnUrl = ipnUrl;
            this.SuccessUrl = successUrl;
            this.CancelUrl = cancelUrl;
            this.CustomId = customId;
            this.PayerName = payerName;
            this.PayerPhone = payerPhone;
            this.PayerEmail = payerEmail;
        }
        
        /// <summary>
        /// ID del negocio que está generando el link de pago
        /// </summary>
        /// <value>ID del negocio que está generando el link de pago</value>
        [DataMember(Name="businessUnitId", EmitDefaultValue=false)]
        public string BusinessUnitId { get; set; }

        /// <summary>
        /// Monto a pagar
        /// </summary>
        /// <value>Monto a pagar</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Concepto de pago o comentario
        /// </summary>
        /// <value>Concepto de pago o comentario</value>
        [DataMember(Name="concept", EmitDefaultValue=false)]
        public string Concept { get; set; }

        /// <summary>
        /// Dirección para recibir webhooks de notificaciones de pago en segundo plano
        /// </summary>
        /// <value>Dirección para recibir webhooks de notificaciones de pago en segundo plano</value>
        [DataMember(Name="ipnUrl", EmitDefaultValue=false)]
        public string IpnUrl { get; set; }

        /// <summary>
        /// URL a donde redireccionar si el pago es satisfactorio
        /// </summary>
        /// <value>URL a donde redireccionar si el pago es satisfactorio</value>
        [DataMember(Name="successUrl", EmitDefaultValue=false)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// URL a donde redireccionar si el pago es cancelado
        /// </summary>
        /// <value>URL a donde redireccionar si el pago es cancelado</value>
        [DataMember(Name="cancelUrl", EmitDefaultValue=false)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Identificador externo para trazabilidad
        /// </summary>
        /// <value>Identificador externo para trazabilidad</value>
        [DataMember(Name="customId", EmitDefaultValue=false)]
        public string CustomId { get; set; }

        /// <summary>
        /// Nombre del pagador (si se conoce)
        /// </summary>
        /// <value>Nombre del pagador (si se conoce)</value>
        [DataMember(Name="payerName", EmitDefaultValue=false)]
        public string PayerName { get; set; }

        /// <summary>
        /// Teléfono del pagador (si se conoce)
        /// </summary>
        /// <value>Teléfono del pagador (si se conoce)</value>
        [DataMember(Name="payerPhone", EmitDefaultValue=false)]
        public string PayerPhone { get; set; }

        /// <summary>
        /// Email del pagador (si se conoce)
        /// </summary>
        /// <value>Email del pagador (si se conoce)</value>
        [DataMember(Name="payerEmail", EmitDefaultValue=false)]
        public string PayerEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body1 {\n");
            sb.Append("  BusinessUnitId: ").Append(BusinessUnitId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Concept: ").Append(Concept).Append("\n");
            sb.Append("  IpnUrl: ").Append(IpnUrl).Append("\n");
            sb.Append("  SuccessUrl: ").Append(SuccessUrl).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  CustomId: ").Append(CustomId).Append("\n");
            sb.Append("  PayerName: ").Append(PayerName).Append("\n");
            sb.Append("  PayerPhone: ").Append(PayerPhone).Append("\n");
            sb.Append("  PayerEmail: ").Append(PayerEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body1);
        }

        /// <summary>
        /// Returns true if Body1 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusinessUnitId == input.BusinessUnitId ||
                    (this.BusinessUnitId != null &&
                    this.BusinessUnitId.Equals(input.BusinessUnitId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Concept == input.Concept ||
                    (this.Concept != null &&
                    this.Concept.Equals(input.Concept))
                ) && 
                (
                    this.IpnUrl == input.IpnUrl ||
                    (this.IpnUrl != null &&
                    this.IpnUrl.Equals(input.IpnUrl))
                ) && 
                (
                    this.SuccessUrl == input.SuccessUrl ||
                    (this.SuccessUrl != null &&
                    this.SuccessUrl.Equals(input.SuccessUrl))
                ) && 
                (
                    this.CancelUrl == input.CancelUrl ||
                    (this.CancelUrl != null &&
                    this.CancelUrl.Equals(input.CancelUrl))
                ) && 
                (
                    this.CustomId == input.CustomId ||
                    (this.CustomId != null &&
                    this.CustomId.Equals(input.CustomId))
                ) && 
                (
                    this.PayerName == input.PayerName ||
                    (this.PayerName != null &&
                    this.PayerName.Equals(input.PayerName))
                ) && 
                (
                    this.PayerPhone == input.PayerPhone ||
                    (this.PayerPhone != null &&
                    this.PayerPhone.Equals(input.PayerPhone))
                ) && 
                (
                    this.PayerEmail == input.PayerEmail ||
                    (this.PayerEmail != null &&
                    this.PayerEmail.Equals(input.PayerEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessUnitId != null)
                    hashCode = hashCode * 59 + this.BusinessUnitId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Concept != null)
                    hashCode = hashCode * 59 + this.Concept.GetHashCode();
                if (this.IpnUrl != null)
                    hashCode = hashCode * 59 + this.IpnUrl.GetHashCode();
                if (this.SuccessUrl != null)
                    hashCode = hashCode * 59 + this.SuccessUrl.GetHashCode();
                if (this.CancelUrl != null)
                    hashCode = hashCode * 59 + this.CancelUrl.GetHashCode();
                if (this.CustomId != null)
                    hashCode = hashCode * 59 + this.CustomId.GetHashCode();
                if (this.PayerName != null)
                    hashCode = hashCode * 59 + this.PayerName.GetHashCode();
                if (this.PayerPhone != null)
                    hashCode = hashCode * 59 + this.PayerPhone.GetHashCode();
                if (this.PayerEmail != null)
                    hashCode = hashCode * 59 + this.PayerEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
